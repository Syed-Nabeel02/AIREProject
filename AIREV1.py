from datetime import datetime
import pandas as pd
import os.path
from docxtpl import DocxTemplate
from pathlib import Path
import numpy as np
from alive_progress import alive_bar
from pprint import pprint
import json

"""
Creates an output folder and many intake form Word files with proper names based on an operational plan Excel file. 

1.Template Word file (fixed)
2.Operation plan Excel file (prompt)
->
1.'OUTPUT' folder - Several filled template files for each item in an Operational plan Excel file worksheet (RUN or GROW or TRANSFORM)
2.'NEWER OUTPUT' folder - empty

Methods
- open_home_menu() -> str
- fill_in_template(doc: DocxTemplate, record:dict, date_time: datetime) -> DocxTemplate
- generate_file_name(record: dict, sheet_name: str) -> str
- generate_templates(sheet_name: str) -> None
- get_statistics() -> None
"""

records = []

def generate_templates(sheet_name: str) -> None:
    """
    Generate Word template files from an Excel file.
    
    Parameters
    ----------
    sheet_name : str

    Returns
    -------
    df : pandas.DataFrame
    """

    base_dir = Path(__file__).parent

    word_template_path = base_dir / "Early_Engagement" / "EA Engagement Self-Assessment Template v0.6.docx"
    excel_path = base_dir / "Early_Engagement" / "CYSSC FY 2022-23 Operational Plan - PUBLISHED June 2022.xlsx"

    # CREATE OUTPUT FOLDER FOR WORD DOCS
    # exists_ok is for just in case a folder with that name exists already
    output_dir = base_dir / "Output" # Early_Engagement_Output and EarlyEngagementOutput cause error
    output_dir.mkdir(exist_ok=True)

    today = datetime.now()
    date_time = today.strftime("%m/%d/%Y, %H:%M:%S")

    df = pd.read_excel(excel_path, sheet_name) # many items as a dataframe
    item_number = len(df.index)

    print("-------------------------- Start ---------------------------------")

    for index, record in enumerate(df.to_dict(orient="records")[:]): # for each item

        # 1.Generate and fill in a template for an item
        doc = DocxTemplate(word_template_path)
        doc = fill_in_template(doc, record, date_time)

        # 2.Generate a name for the template
        name = generate_file_name(record, sheet_name)

        # 3.Save the template at the correct directory
        output_path = output_dir / name
        if not os.path.isfile(output_path):
            # If file does not exist, save to output path, this line allows for copies to not be made when ran
            name = "NEW-" + name
            output_path = output_dir / name
            doc.save(output_path) # ***
        else: # if the file already exists, do not save the file
            continue

        # 4.Save records for get_statistics
        records.append(record)

    open_output_folder()
    
    print("-------------------------- Complete ---------------------------------")

def fill_in_template(doc: DocxTemplate, record:dict, date_time: datetime) -> DocxTemplate:
    """
    Fill in the template with an item's details
    """
    doc.render(record) 
    doc.add_paragraph("This was Autogenerated on" + " " + date_time)
    return doc

def generate_file_name(record: dict, sheet_name: str) -> str:
    """
    Generate a file name based on an item's details and sheet_name
    """
    IDColumn = record['ID']
    InitColumn = record['Initiative']
    ItemCol = record['WorkItemName']
    BranchColumn = record['AccountableBranch'][-6:]
    if record['MustDoCantFail'] == 'Yes':
        name = f"{IDColumn}{'-'}{BranchColumn}{'-'}{'MDCF'}{'-'}{sheet_name[0]}{'-'}{InitColumn}{'-'}{ItemCol}.docx"
    else:
        name = f"{IDColumn}{'-'}{BranchColumn}{'-'}{sheet_name[0]}{'-'}{InitColumn}{'-'}{ItemCol}.docx"
    return name

def open_output_folder() -> None:
    base_dir = Path(__file__).parent
    output_dir = base_dir / "Output"
    os.system("start " + str(output_dir))