from datetime import datetime
import pandas as pd
import os.path
from docxtpl import DocxTemplate
from pathlib import Path
import numpy as np

"""
    1.Template Word file (fixed)
    2.Operation plan Excel file (prompt)
    ->
    1.'OUTPUT' folder - Several filled template files for each item in an Operational plan Excel file worksheet (RUN or GROW or TRANSFORM)
    2.'NEWER OUTPUT' folder - empty
"""

def fill_in_template(doc: DocxTemplate, record:dict, date_time: datetime):
    """
    Fill in the template with an item's details
    """
    doc.render(record) 
    doc.add_paragraph("This was Autogenerated on" + " " + date_time)
    return doc

def generate_file_name(record: dict, sheet_name: str) -> str:
    """
    Generate a file name based on an item's details and sheet_name
    """
    IDColumn = record['ID']
    InitColumn = record['Initiative']
    ItemCol = record['WorkItemName']
    BranchColumn = record['AccountableBranch'][-6:]
    if record['MustDoCantFail'] == 'Yes':
        name = f"{IDColumn}{'-'}{BranchColumn}{'-'}{'MDCF'}{'-'}{sheet_name[0]}{'-'}{InitColumn}{'-'}{ItemCol}.docx"
    else:
        name = f"{IDColumn}{'-'}{BranchColumn}{'-'}{sheet_name[0]}{'-'}{InitColumn}{'-'}{ItemCol}.docx"
    return name

def read_data(sheet_name: str) -> None:
    """
    Read data from a file.
    
    Parameters
    ----------
    sheet_name : str

    Returns
    -------
    df : pandas.DataFrame
    """
    base_dir = Path(__file__).parent

    word_template_path = base_dir / "EA Engagement Self-Assessment Template v0.6.docx"
    excel_path = base_dir / input("Please Enter Operational Plan document name: ")

    # CREATE OUTPUT FOLDER FOR WORD DOCS
    # exists_ok is for just in case a folder with that name exists already
    output_dir = base_dir / "OUTPUT"
    output_dir2 = base_dir / "NEWER OUTPUT"
    output_dir.mkdir(exist_ok=True)
    output_dir2.mkdir(exist_ok=True)

    today = datetime.now()
    date_time = today.strftime("%m/%d/%Y, %H:%M:%S")

    df = pd.read_excel(excel_path, sheet_name) # many items as a dataframe
    for record in df.to_dict(orient="records")[:]: # for each item

        # 1.Generate and fill in a template for an item
        doc = DocxTemplate(word_template_path)
        doc = fill_in_template(doc, record, date_time)

        # 2.Generate a name for the template
        name = generate_file_name(record, sheet_name)

        # 3.Save the template at the correct directory
        output_path = output_dir / name
        if not os.path.isfile(output_path):
            # If file does not exist, save to output path, this line allows for copies to not be made when ran
            name = "NEW-" + name
            output_path = output_dir / name
            doc.save(output_path) # ***
        else: # if the file already exists, do not save the file
            continue

    return

#
# def compare():
#     base_dir = Path(__file__).parent
#     excel_path = base_dir / "CYSSC FY 2022-23 Operational Plan - PUBLISHED June 2022.xlsx"
#     excel_path2 = base_dir / input("enter new operational plan name:")
#     output_dir = base_dir / "New Output"
#     output_dir.mkdir(exist_ok=True)
#     df = pd.read_excel(excel_path, sheet_name="RUN")
#     df1 = pd.read_excel(excel_path2, sheet_name="RUN")
#     # print(df.equals(df1))
#     comparison_values = df.values == df1.values
#     #print(comparison_values)
#     rows, cols = np.where(comparison_values == False)
#     for item in zip(rows,cols):
#         df.iloc[item[0], item[1]] = '{} --> {}'.format(df.iloc[item[0], item[1]], df1.iloc[item[0], item[1]])
#     df.to_excel('GenerateComparisonDoc.xlsx', index=False, header=True)
#     return


if __name__ == '__main__':
    print("Welcome")
    sheet_name = input("Please enter sheet name (RUN/GROW/TRANSFORM):")
    sheet_name = sheet_name.upper()

    read_data(sheet_name)
    
    print("----------------------------------------")
    print("File generation completed. Check the OUTPUT folder.")

    # print("Please select one of the options below")
    # print("Enter either 1,2 or 3")
    # print("Option 1: Auto-generate Forms?")
    # print("Option 2: Compare Forms?")
    # print("Option 3: Do you want to exit the menu?")
    # option = input()
    # while int(option) < 1 or int(option) > 3:
    #     option = input("Please enter a valid response: ")
    # if int(option) == 1:
    #     sheet_name = input("Please enter sheet name:")
    #     read_data(sheet_name)
    #     print("finish generate")
    # elif int(option) == 2:
    #     compare()
    #     print("finish compare")
    # else:
    #     exit()
