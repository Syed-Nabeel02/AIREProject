import pandas as pd
from docx import Document
from docx.shared import Inches
from pathlib import Path
from docxtpl import DocxTemplate
import os
from datetime import datetime

# Define the paths to the operational plan, intake form template, and output directory
path_to_operational_plan = Path().absolute() / 'data' / 'input' / 'generate_intake_forms' / 'new_operational_plan.xlsx'
path_to_intake_form_template = Path().absolute() / 'data' / 'input' / 'generate_intake_forms' / 'new_intake_form.docx'
path_to_output = Path().absolute() / 'data' / 'output' / 'generate_intake_forms' 

def main():
    # Process the operational plan data, fill the template with the data, and save the generated names
    data_list = process_operational_plan_data()
    generated_names = fill_template(data_list)
    save_generated_names_to_file(generated_names)
    open_output_folder()

def process_operational_plan_data():
    # Read the operational plan Excel file
    dataframe = pd.read_excel(path_to_operational_plan)
    data_list = []  # Initialize a list to store the processed data

    # Loop through the rows and organize data into a dictionary
    for row in dataframe.values.tolist():
        row_dict = {}  # Initialize a dictionary for each row
        for index, value in enumerate(row):
            header = dataframe.columns[index].replace(" ", "")
            if header == "Must-Do-Can't-Fail":
                header = "MDCF"
            # Handle NaN values
            if pd.isna(value):
                value = ""
            # Handle date values
            if header == "AnticipatedStartDate" or header == "AnticipatedEndDate":
                if not isinstance(value, str):
                    value = value.date()
            # Handle boolean values
            if isinstance(value, bool):
                value = "Yes" if value else "No"

            row_dict[header] = value

        row_dict["isInOP"] = "Yes"
        data_list.append(row_dict)
        
    return data_list

def fill_template(data_list):
    # Create a Word document using a template and fill it with data
    doc = DocxTemplate(path_to_intake_form_template)
    count = len(data_list)
    generated_names = []

    # Ensure the output directory exists
    if not path_to_output.exists():
        path_to_output.mkdir(parents=True, exist_ok=True)

    # Loop through the data, fill the template, and save it with a generated name
    for index, data in enumerate(data_list):
        intake_form_name = generate_name(data)
        generated_names.append(intake_form_name)
        print(intake_form_name)

        doc.render(data) 
        doc.add_paragraph("Do not modify")
        doc.add_paragraph("Autogenerated date: " + datetime.now().strftime("%m/%d/%Y %H:%M:%S"))
        doc.add_paragraph("Original name: " + intake_form_name)
        path_to_intake_form = path_to_output / intake_form_name
        doc.save(path_to_intake_form)
        doc = DocxTemplate(path_to_intake_form_template)

        print(index + 1, "/", count, " completed")

    return generated_names

def generate_name(data):
    # Generate a name for the intake form file based on the given data
    # The naming convention is based on specific attributes from the data
    # Expected Name: ItemID_AccountableBranch_MDCF_Run/Grow/Trasform_ItemName.docx (. \ / : characters are removed)
    
    intake_form_name = ""

    if(data['ItemID']):
        intake_form_name += data['ItemID'] + "_"
    else:
        intake_form_name += "NoID" + "_"
    intake_form_name += "[" + data['AccountableBranch'][0:4].replace(" ","") + "]" + "_"
    if(data["MDCF"] == "Yes"):
        intake_form_name += "{" + "MDCF" + "}" + "_"
    intake_form_name += "(" + data['WorkType'][0] + ")" + "_"

    itemName = data['ItemName'].replace(" ", "-")
    if(len(itemName) > 70):
        itemName = itemName[0:70]
    intake_form_name += itemName
    
    intake_form_name = intake_form_name.replace(".", "")
    intake_form_name = intake_form_name.replace("\\", "")
    intake_form_name = intake_form_name.replace("/", "")
    intake_form_name = intake_form_name.replace(":", "")

    intake_form_name += ".docx"

    return intake_form_name

def save_generated_names_to_file(generated_names):
    # Save the generated names in a Word document
    output_doc = Document()
    output_doc.add_heading("Generated Names List", level=1)
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    output_doc.add_paragraph("Generated at: " + current_time)
    for name in generated_names:
        output_doc.add_paragraph(name)
    output_file_path = path_to_output / "generated_names_list.docx"
    output_doc.save(output_file_path)
    print("Generated names list saved to", output_file_path)

def open_output_folder() -> None:
    os.startfile(str(path_to_output))

if __name__ == "__main__":
    main()