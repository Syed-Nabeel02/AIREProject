from datetime import datetime
import pandas as pd
import os.path
from docxtpl import DocxTemplate
from docx import Document
from pathlib import Path
import numpy as np
from alive_progress import alive_bar
from pprint import pprint
import json
import pprint
from concurrent.futures import ThreadPoolExecutor
import shutil
from . import plancomparison

# line 82-89 : what to do with old files **********************************

"""
Creates an output folder and many intake form Word files with proper names based on an operational plan Excel file. 

1.Template Word file (fixed)
2.Operation plan Excel file (prompt)
->
1.'OUTPUT' folder - Several filled template files for each item in an Operational plan Excel file worksheet (RUN or GROW or TRANSFORM)
2.'NEWER OUTPUT' folder - empty

Methods
----------
run(operational_plan_path: str, sheet_name: str) -> None
generate_templates(directory: str, sheet_name: str) -> None
fill_in_template(doc: DocxTemplate, record:dict, date_time: datetime) -> DocxTemplate

generate_file_name(record: dict, sheet_name: str) -> str
open_output_folder() -> None

add_footer()
generate_report()

"""
intake_form_record = []

def run(operational_plan_path: str, sheet_name: str) -> None:
    generate_intake_forms(operational_plan_path, sheet_name)

def generate_intake_forms(operational_plan_path: str, sheet_name: str) -> None:
    intake_form_template_path = Path(__file__).parent.parent / "resources" / "early_engagement" / "EA Engagement Self-Assessment Template v0.6.docx"

    # CREATE OUTPUT FOLDER FOR WORD DOCS
    # exists_ok is for just in case a folder with that name exists already
    early_engagement_output_folder_path = Path(__file__).parent.parent / "output" / "early_engagement_output"
    early_engagement_output_folder_path.mkdir(exist_ok=True)
    today = datetime.now()
    date_time = today.strftime("%m/%d/%Y, %H:%M:%S")
    dataframe = pd.read_excel(operational_plan_path, sheet_name) # many items as a dataframe

    plancomparison.run(get_last_legacy_operational_plan_file_path(), operational_plan_path)

    shutil.copyfile(operational_plan_path, get_new_legacy_operational_plan_file_path())

    print("-------------------------- Start ---------------------------------")

    intake_form_number = len(dataframe.index)

    with ThreadPoolExecutor() as executor:
        for index, record in enumerate(dataframe.to_dict(orient="records")[:]): # for each operational plan item
            executor.submit(generate_intake_form, intake_form_template_path, record, sheet_name, date_time, early_engagement_output_folder_path, index, intake_form_number)

    open_intake_form_folder()
    
    # pprint.pprint(intake_form_record)
    print("-------------------------- Complete ---------------------------------")

# show result message: number of intake forms geneted, old and new operational plan comparison result, number of initiatives, cells changed

def get_new_legacy_operational_plan_file_path():
    legacy_operational_plan_folder_path = Path(__file__).parent.parent / "resources" / "early_engagement" / "legacy_operational_plan"
    legacy_operational_plan_file_name = str(get_next_legacy_file_number()) + ".xlsx"
    return legacy_operational_plan_folder_path / legacy_operational_plan_file_name


def generate_intake_form(intake_form_template_path, record, sheet_name, date_time, early_engagement_output_folder_path, index, intake_form_number):
    print(int(index)+1, "/", intake_form_number,  "started")
    doc = DocxTemplate(intake_form_template_path)

    intake_form_name = generate_intake_form_name(record, sheet_name)

    doc = fill_in_intake_form(doc, record, date_time, intake_form_name)

    early_engagement_output_file_path = early_engagement_output_folder_path / intake_form_name

    if not os.path.isfile(early_engagement_output_file_path):
        # If file does not exist, save to output path, this line allows for copies to not be made when ran
        intake_form_name = "NEW_" + intake_form_name
        early_engagement_output_file_path = early_engagement_output_folder_path / intake_form_name
        doc.save(early_engagement_output_file_path) 

    intake_form_record.append((index+1,  intake_form_name))

def fill_in_intake_form(doc: DocxTemplate, record:dict, date_time: datetime, intake_form_name: str) -> DocxTemplate:
    """
    Fill in the template with an item's details
    """
    doc.render(record) 
    doc.add_paragraph("This was Autogenerated on" + " " + date_time)
    doc.add_paragraph("Do not modify:" + intake_form_name)
    return doc

def generate_intake_form_name(record: dict, sheet_name: str) -> str:
    """
    Generate a file name based on an item's details and sheet_name
    """
    IDColumn = record['ID']
    InitColumn = record['Initiative']
    ItemCol = record['WorkItemName']
    BranchColumn = record['AccountableBranch'][-6:]

    BranchColumn = BranchColumn.strip()
    InitColumn = InitColumn.strip()
    ItemCol = ItemCol.strip()

    if record['MustDoCantFail'] == 'Yes':
        name = f"{IDColumn}{'_'}{BranchColumn}{'_'}{'MDCF'}{'_'}{sheet_name[0]}{'_'}{InitColumn}{'_'}{ItemCol}"
    else:
        name = f"{IDColumn}{'_'}{BranchColumn}{'_'}{sheet_name[0]}{'_'}{InitColumn}{'_'}{ItemCol}"
    
    name = name.replace(' ', '')
    name = name.replace('-', '')
    name = name.replace('.', '')
    name = name + ".docx"
    
    return name

def open_intake_form_folder() -> None:
    early_engagement_output_folder_path = Path(__file__).parent.parent / "output" / "early_engagement_output"
    os.system("start " + str(early_engagement_output_folder_path))

def get_file_names_in_folder(folder_path) -> list:
    file_names = []
    for path, subdirs, files in os.walk(folder_path):
        for name in files:
            file_name = Path(os.path.join(path, name)).name
            file_names.append(file_name)
    return file_names

def get_legacy_file_names():
    file_names = []
    for path, subdirs, files in os.walk(Path(__file__).parent.parent / "resources" / "early_engagement" / "legacy_operational_plan"):
        for name in files:
            file_name = Path(os.path.join(path, name)).name
            file_names.append(file_name)
    return file_names

def get_last_file_number():
    file_names = get_legacy_file_names()
    file_numbers = [int(file_name.split('.')[0]) for file_name in file_names]
    file_numbers = sorted(file_numbers)
    return file_numbers[-1]

def get_next_legacy_file_number():
    return get_last_file_number() + 1

def get_last_legacy_operational_plan_file_path():
    file_names = get_legacy_file_names()
    last_file_name = str(get_last_file_number()) + ".xlsx"
    last_operational_plan_path = Path(__file__).parent.parent / "resources" / "early_engagement" / "legacy_operational_plan" / last_file_name
    return last_operational_plan_path